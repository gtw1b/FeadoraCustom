name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: Fedoraware
  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:PlatformToolset="v143" /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:PlatformTarget=x86 /p:Platform=x86 ${{env.SOLUTION_FILE_PATH}} 
    
    - uses: actions/upload-artifact@v2
      with:
       name: Fedoraware
       path: ${{env.SOLUTION_FILE_PATH}}/Release/Fware(Release).dll
    
    # Update version in package.json according to the tag
    #- name: Check package version
    #  uses: technote-space/package-version-check-action@v1
    #
    #- name: Changelog
    #  uses: scottbrenner/generate-changelog-action@master
    #  id: Changelog
    #  env:
    #    REPO: ${{ github.repository }}
    
    #- name: Create Release
    #  id: create_release
    #  uses: actions/create-release@latest
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    tag_name: ${{ github.ref }}
    #    path: ${{env.SOLUTION_FILE_PATH}}/Release/Fware(Release).dll
    #    release_name: Release ${{ github.ref }}
    #    body: |
    #      Hello
    #    draft: false
    #    prerelease: false
